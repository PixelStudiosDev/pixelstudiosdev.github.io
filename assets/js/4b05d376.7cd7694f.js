"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3740],{1470:(e,i,l)=>{l.d(i,{A:()=>P});var s=l(6540),t=l(8215),n=l(3104),r=l(6347),a=l(205),d=l(7485),u=l(1682),o=l(679);function c(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:i,children:l}=e;return(0,s.useMemo)((()=>{const e=i??function(e){return c(e).map((({props:{value:e,label:i,attributes:l,default:s}})=>({value:e,label:i,attributes:l,default:s})))}(l);return function(e){const i=(0,u.XI)(e,((e,i)=>e.value===i.value));if(i.length>0)throw new Error(`Docusaurus error: Duplicate values "${i.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[i,l])}function g({value:e,tabValues:i}){return i.some((i=>i.value===e))}function p({queryString:e=!1,groupId:i}){const l=(0,r.W6)(),t=function({queryString:e=!1,groupId:i}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:e,groupId:i});return[(0,d.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const i=new URLSearchParams(l.location.search);i.set(t,e),l.replace({...l.location,search:i.toString()})}),[t,l])]}function m(e){const{defaultValue:i,queryString:l=!1,groupId:t}=e,n=h(e),[r,d]=(0,s.useState)((()=>function({defaultValue:e,tabValues:i}){if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const l=i.find((e=>e.default))??i[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:i,tabValues:n}))),[u,c]=p({queryString:l,groupId:t}),[m,x]=function({groupId:e}){const i=function(e){return e?`docusaurus.tab.${e}`:null}(e),[l,t]=(0,o.Dv)(i);return[l,(0,s.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:t}),v=(()=>{const e=u??m;return g({value:e,tabValues:n})?e:null})();(0,a.A)((()=>{v&&d(v)}),[v]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!g({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);d(e),c(e),x(e)}),[c,x,n]),tabValues:n}}var x=l(2303);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=l(4848);function j({className:e,block:i,selectedValue:l,selectValue:s,tabValues:r}){const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,n.a_)(),u=e=>{const i=e.currentTarget,t=a.indexOf(i),n=r[t].value;n!==l&&(d(i),s(n))},o=e=>{let i=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const l=a.indexOf(e.currentTarget)+1;i=a[l]??a[0];break}case"ArrowLeft":{const l=a.indexOf(e.currentTarget)-1;i=a[l]??a[a.length-1];break}}i?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":i},e),children:r.map((({value:e,label:i,attributes:s})=>(0,y.jsx)("li",{role:"tab",tabIndex:l===e?0:-1,"aria-selected":l===e,ref:e=>{a.push(e)},onKeyDown:o,onClick:u,...s,className:(0,t.A)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":l===e}),children:i??e},e)))})}function f({lazy:e,children:i,selectedValue:l}){const n=(Array.isArray(i)?i:[i]).filter(Boolean);if(e){const e=n.find((e=>e.props.value===l));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:n.map(((e,i)=>(0,s.cloneElement)(e,{key:i,hidden:e.props.value!==l})))})}function b(e){const i=m(e);return(0,y.jsxs)("div",{className:(0,t.A)("tabs-container",v.tabList),children:[(0,y.jsx)(j,{...i,...e}),(0,y.jsx)(f,{...i,...e})]})}function P(e){const i=(0,x.A)();return(0,y.jsx)(b,{...e,children:c(e.children)},String(i))}},7335:(e,i,l)=>{l.r(i),l.d(i,{assets:()=>o,contentTitle:()=>u,default:()=>g,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"guilds/developer-api/guilds-api","title":"Working with Guilds API","description":"- Once you have added Guilds as a dependency in your project, you can start using the Guilds API.","source":"@site/docs/guilds/developer-api/guilds-api.mdx","sourceDirName":"guilds/developer-api","slug":"/guilds/developer-api/guilds-api","permalink":"/guilds/developer-api/guilds-api","draft":false,"unlisted":false,"editUrl":"https://github.com/PixelStudiosDev/pixelstudiosdev.github.io/edit/master/docs/guilds/developer-api/guilds-api.mdx","tags":[],"version":"current","lastUpdatedAt":1754823578000,"frontMatter":{},"sidebar":"guilds","previous":{"title":"Using the Guilds API","permalink":"/guilds/developer-api/enable"},"next":{"title":"Working with Guilds Events","permalink":"/guilds/developer-api/guilds-events"}}');var t=l(4848),n=l(8453),r=l(1470),a=l(9365);const d={},u="Working with Guilds API",o={},c=[{value:"Examples",id:"examples",level:2},{value:"Example methods",id:"example-methods",level:3},{value:"Example usage",id:"example-usage",level:3},{value:"Methods List",id:"methods-list",level:3},{value:"Why using PlayerProvider?",id:"why-using-playerprovider",level:3},{value:"Example usage",id:"example-usage-1",level:3},{value:"Methods List",id:"methods-list-1",level:3},{value:"Example usage",id:"example-usage-2",level:3},{value:"Guilds",id:"guilds",level:3},{value:"Getting a guild",id:"getting-a-guild",level:3},{value:"By guild&#39;s UUID",id:"by-guilds-uuid",level:4},{value:"By player&#39;s UUID",id:"by-players-uuid",level:4},{value:"By guild&#39;s name",id:"by-guilds-name",level:4}];function h(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"working-with-guilds-api",children:"Working with Guilds API"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Once you have added ",(0,t.jsx)(i.code,{children:"Guilds"})," as a dependency in your project, you can start using the Guilds API."]}),"\n"]}),"\n",(0,t.jsxs)(r.A,{children:[(0,t.jsxs)(a.A,{value:"new",label:"v2.0",default:!0,children:[(0,t.jsx)(i.p,{children:"The new API is designed to be more user-friendly and efficient.\nThe previous API was integrated into the jar file of the plugin, which was causing problems in some cases."}),(0,t.jsx)(i.p,{children:"The new API is now a separate dependency, which allows for better modularity and flexibility in your projects."}),(0,t.jsxs)(i.p,{children:["It is based on the ",(0,t.jsx)(i.code,{children:"GuildAPI"})," class, which has the ",(0,t.jsx)(i.strong,{children:"Provider"})," interfaces."]}),(0,t.jsxs)(i.p,{children:["As you can see, on the ",(0,t.jsx)(i.a,{href:"https://github.com/PixelStudiosDev/GuildsAPI/blob/master/src/main/java/me/leoo/guilds/api/objects/GuildAPI.java",children:"Github repository"}),"\nof the GuildsAPI, the ",(0,t.jsx)(i.code,{children:"GuildAPI"})," class is an interface that provides methods to interact with the guilds system."]}),(0,t.jsx)(i.p,{children:"We have got the following interfaces:"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"GuildProvider"}),": This interface provides methods to interact with the guilds system."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"PlayerProvider"}),": This interface provides methods to interact with the players in the guilds system."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"UtilsProvider"}),": This interface provides utility methods to interact with the guilds system."]}),"\n"]}),(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"GuildProvider"})," is the one that you will use the most, as it provides methods to interact with the guilds system."]}),(0,t.jsxs)(i.p,{children:["You can use methods such as ",(0,t.jsx)(i.code,{children:"GuildAPI.getGuildProvider()"})," to get the ",(0,t.jsx)(i.code,{children:"GuildProvider"})," instance (the same for the other interfaces)."]}),(0,t.jsx)(i.p,{children:"We recomment to create a static variable for each provider you use in your project, so you can access it easily."}),(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",metastring:'title="Example.java"',children:"import me.leoo.guilds.api.objects.GuildAPI;\nimport me.leoo.guilds.api.objects.guild.GuildProvider;\n\npublic class Example {\n   private static final GuildProvider GUILD_PROVIDER = GuildAPI.getGuildProvider();\n\n   private static final PlayerProvider PLAYER_PROVIDER = GuildAPI.getPlayerProvider();\n\n   private static final UtilsProvider UTILS_PROVIDER = GuildAPI.getUtilsProvider();\n}\n"})}),(0,t.jsx)(i.p,{children:"Once you have the provider instances, you can use them to interact with the guilds system."}),(0,t.jsx)(i.h2,{id:"examples",children:"Examples"}),(0,t.jsx)(i.p,{children:"Here, you will see some example for each provider.\nWe will not explore many methods, you can do that by yourself in two ways:"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Checking the ",(0,t.jsx)(i.a,{href:"https://github.com/PixelStudiosDev/GuildsAPI/tree/master/src/main/java/me/leoo/guilds/api",children:"Github repository"})," of the GuildsAPI, where you can find the source code of the API."]}),"\n",(0,t.jsx)(i.li,{children:"Checking the methods when writing your code, as the IDE will show you the methods available in the interfaces."}),"\n"]}),(0,t.jsx)(i.p,{children:"We will may publish the Javadocs of the API in the future, but for now, you can use the source code to understand how to use the API."}),(0,t.jsxs)(r.A,{children:[(0,t.jsxs)(a.A,{value:"guild",label:"GuildProvider",default:!0,children:[(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"GuildProvider"})," interface provides methods to interact with the guilds system."]}),(0,t.jsx)(i.h3,{id:"example-methods",children:"Example methods"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"GuildView getByUuid(UUID uuid)"}),": Returns the guild with the given UUID."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"GuildView getByName(String name)"}),": Returns the guild with the given name."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"GuildView getByPlayer(Player player)"}),": Returns the guild of the player."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"GuildView getByPlayer(UUID player)"}),": Returns the guild of the player with the given UUID."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"List<GuildView> getGuilds()"}),": Returns a list of all guilds on the server."]}),"\n"]}),"\n"]}),(0,t.jsx)(i.h3,{id:"example-usage",children:"Example usage"}),(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",metastring:'title="ExampleGuild.java"',children:"    public GuildView getGuildByPlayer(UUID playerUuid) {\n        GuildView guild = GUILD_PROVIDER.getByPlayer(playerUuid);\n\n        if (guild == null) {\n            return null; // Player is not in a guild\n        }\n\n        return guild;\n    }\n\n    public GuildView getGuildByName(String name) {\n        GuildView guild = GUILD_PROVIDER.getByName(name);\n\n        if (guild == null) {\n            return null; // Guild does not exist\n        }\n\n        return guild;\n    }\n\n    public List<GuildView> getAllGuilds() {\n        return GUILD_PROVIDER.getGuilds();\n    }\n\n     // Get guilds with less than 10 members\n    public List<GuildView> getUnderfilledGuilds() {\n        return GUILD_PROVIDER.getGuilds().stream()\n            .filter(guild -> guild.getMembersView().size() < 10)\n            .collect(Collectors.toList());\n    }\n"})})]}),(0,t.jsxs)(a.A,{value:"player",label:"PlayerProvider",children:[(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"PlayerProvider"})," interface only provides a few methods to interact with the players in the guilds system."]}),(0,t.jsx)(i.h3,{id:"methods-list",children:"Methods List"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"PlayerView getPlayer(UUID uuid)"}),": Returns the player with the given UUID."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"PlayerView getPlayer(Player player)"}),": Returns the player with the given Player object."]}),"\n"]}),(0,t.jsx)(i.h3,{id:"why-using-playerprovider",children:"Why using PlayerProvider?"}),(0,t.jsxs)(i.p,{children:["It could be useful in some cases, but in most cases you will be able to use:\n",(0,t.jsx)(i.code,{children:"GuildView.getPlayer(UUID uuid) or GuildView.getPlayer(String name)"})," methods to get the player in the guild.\nEach of these methods returns a ",(0,t.jsx)(i.code,{children:"PlayerView"})," object, which contains information about the player in the guild."]}),(0,t.jsx)(i.h3,{id:"example-usage-1",children:"Example usage"}),(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",metastring:'title="ExamplePlayer.java"',children:"    public PlayerView getPlayerByUuid(UUID uuid) {\n        return PLAYER_PROVIDER.getPlayer(uuid);\n    }\n\n    public PlayerView getPlayerByName(String name) {\n        return GUILD_VIEW.getPlayer(name); // Using GuildView to get the player\n    }\n"})})]}),(0,t.jsxs)(a.A,{value:"utils",label:"UtilsProvider",children:[(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"UtilsProvider"})," interface provides utility methods to interact with the guilds system."]}),(0,t.jsx)(i.h3,{id:"methods-list-1",children:"Methods List"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"void debug(String message)"}),": Sends a debug message to the console."]}),"\n"]}),(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["For debug method, you can use the ",(0,t.jsx)(i.code,{children:"GuildAPI.debug(String message)"})," method instead, which is a static method that does the same thing."]})}),(0,t.jsx)(i.h3,{id:"example-usage-2",children:"Example usage"}),(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",metastring:'title="ExampleUtils.java"',children:"    public void logDebugMessage(String message) {\n        UTILS_PROVIDER.debug(message);\n    }\n"})})]})]})]}),(0,t.jsxs)(a.A,{value:"old",label:"v1.0",children:[(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The main class of the Guilds API is ",(0,t.jsx)(i.code,{children:"GuildsAPI"}),". You can use this class to access the API methods."]}),"\n"]}),(0,t.jsx)(i.h1,{id:"guildsapi-class-methods",children:"GuildsAPI class methods"}),(0,t.jsx)(i.h3,{id:"guilds",children:"Guilds"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"getGuilds()"}),": Returns a list of all guilds on the server."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"getShownGuilds()"}),": Returns a list of all shown guilds."]}),"\n"]}),(0,t.jsx)(i.h3,{id:"getting-a-guild",children:"Getting a guild"}),(0,t.jsx)(i.h4,{id:"by-guilds-uuid",children:"By guild's UUID"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"getGuildByUuid(UUID uuid)"}),": Returns the guild with the given UUID. Returns ",(0,t.jsx)(i.code,{children:"null"})," if the guild does not exist."]}),"\n"]}),(0,t.jsx)(i.h4,{id:"by-players-uuid",children:"By player's UUID"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"getGuildByPlayer(UUID playerUuid)"}),": Returns the guild of the player with the given UUID. Returns ",(0,t.jsx)(i.code,{children:"null"})," if the player is not in a guild."]}),"\n"]}),(0,t.jsx)(i.h4,{id:"by-guilds-name",children:"By guild's name"}),(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"getGuildByName(String name)"}),": Returns the guild with the given name. Returns ",(0,t.jsx)(i.code,{children:"null"})," if the guild does not exist."]}),"\n"]}),(0,t.jsx)(i.h1,{id:"example",children:"Example"}),(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-java",metastring:'title="ExampleListener.java"',children:'@EventHandler\npublic void onJoin(PlayerJoinEvent event) {\n    Player player = event.getPlayer();\n\n    Guild guild = GuildsAPI.getGuildByPlayer(player.getUniqueId());\n    if (guild == null) {\n        return;\n    }\n\n    player.sendMessage("You are in the guild " + guild.getName() + "!");\n}\n'})})]})]})]})}function g(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,i,l)=>{l.d(i,{R:()=>r,x:()=>a});var s=l(6540);const t={},n=s.createContext(t);function r(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(n.Provider,{value:i},e.children)}},9365:(e,i,l)=>{l.d(i,{A:()=>r});l(6540);var s=l(8215);const t={tabItem:"tabItem_Ymn6"};var n=l(4848);function r({children:e,hidden:i,className:l}){return(0,n.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,l),hidden:i,children:e})}}}]);
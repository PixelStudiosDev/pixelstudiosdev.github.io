"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4598],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},9135:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guilds-tasks/conditions","title":"Conditions","description":"Structure","source":"@site/docs/guilds-tasks/conditions.mdx","sourceDirName":"guilds-tasks","slug":"/guilds-tasks/conditions","permalink":"/guilds-tasks/conditions","draft":false,"unlisted":false,"editUrl":"https://github.com/PixelStudiosDev/pixelstudiosdev.github.io/edit/master/docs/guilds-tasks/conditions.mdx","tags":[],"version":"current","lastUpdatedAt":1748980817000,"sidebarPosition":4,"frontMatter":{"title":"Conditions","sidebar_position":4},"sidebar":"guildstasks","previous":{"title":"Tasks","permalink":"/guilds-tasks/tasks"},"next":{"title":"Rewards","permalink":"/guilds-tasks/rewards"}}');var t=s(4848),r=s(8453);const l={title:"Conditions",sidebar_position:4},d=void 0,o={},c=[{value:"Structure",id:"structure",level:2},{value:"Parameters",id:"parameters",level:2},{value:"How do parameters work effectively?",id:"how-do-parameters-work-effectively",level:3},{value:"Types",id:"types",level:2},{value:"General Conditions",id:"general-conditions",level:3},{value:"Player Conditions",id:"player-conditions",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="tasks.yml"',children:"get_diamonds:\n  type: block_break\n\n  conditions:\n    - type: block\n      materials:\n        - DIAMOND_ORE\n        - GOLD_ORE\n\n  rewards:\n    - guild_xp:100\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We are going to focus on the ",(0,t.jsx)(n.code,{children:"conditions"})," part of the task structure. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Condtions"})," is a list of conditions written in this format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"- type: <condition_type>\n    <condition_parameters>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["where ",(0,t.jsx)(n.code,{children:"<condition_type>"})," is the type of condition and ",(0,t.jsx)(n.code,{children:"<condition_parameters>"})," are the parameters for that\ncondition. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["Before looking at the available condition types, let's look at the parameters formats that can be used in\nconditions. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["String to value: ",(0,t.jsx)(n.code,{children:"<parameter_name>:<value>"})," ",(0,t.jsx)("br",{}),"\nExample: ",(0,t.jsx)(n.code,{children:"min-food:10"})," ",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["String to list of values as YAML array. ",(0,t.jsx)("br",{}),"\nExample:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"materials:\n  - DIAMOND_ORE\n  - GOLD_ORE\n"})}),"\n",(0,t.jsx)(n.h3,{id:"how-do-parameters-work-effectively",children:"How do parameters work effectively?"}),"\n",(0,t.jsxs)(n.p,{children:["You will be able to find both formats depending on the condition type. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.p,{children:"In the complete documentation you will be able to find:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The accepted conditions for each task"}),"\n",(0,t.jsx)(n.li,{children:"The parameter name of each condition"}),"\n",(0,t.jsx)(n.li,{children:"The accepted values and formats for each parameter ("}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Keep in mind that ",(0,t.jsx)(n.strong,{children:"you can't"})," use a different format from the one specified in the documentation for that condition\ntype. ",(0,t.jsx)("br",{}),"\nYou can get into trouble if you try to use a different format, so please follow the documentation carefully. ",(0,t.jsx)("br",{})]})}),"\n",(0,t.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,t.jsxs)(n.p,{children:["Condition types are string values which define the type of condition. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["The plugin actually supports ONLY the 1.8 achievements and tasks, so as of now, you can not use later achievements or\ntasks. ",(0,t.jsx)("br",{}),"\nWe will implement features of newer versions in the future. ",(0,t.jsx)("br",{})]})}),"\n",(0,t.jsx)(n.h3,{id:"general-conditions",children:"General Conditions"}),"\n",(0,t.jsxs)(n.p,{children:["These conditions will be structured using a list. ",(0,t.jsx)("br",{}),"\nIn the table below, you can find the type id, the path and allowed values for each condition."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Path"}),(0,t.jsx)(n.th,{children:"Allowed Values"}),(0,t.jsx)(n.th,{children:"Example Values"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"achievement"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"achievements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/Achievement.html",children:"Achievement IDs"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"BREW_POTION"}),", ",(0,t.jsx)(n.code,{children:"KILL_ENEMY"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"biome"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"biomes"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/block/Biome.html",children:"Biome IDs"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"DESERT"}),", ",(0,t.jsx)(n.code,{children:"FOREST"}),", ",(0,t.jsx)(n.code,{children:"TAIGA"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"block"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"materials"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/Material.html",children:"Material IDs"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"DIAMOND_ORE"}),", ",(0,t.jsx)(n.code,{children:"GOLD_ORE"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"entities"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/entity/EntityType.html",children:"Entity IDs"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"CREEPER"}),", ",(0,t.jsx)(n.code,{children:"ZOMBIE"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"item"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"materials"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/Material.html",children:"Material IDs"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"DIAMOND_ORE"}),", ",(0,t.jsx)(n.code,{children:"GOLD_ORE"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"potion"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"potion_types"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://helpch.at/docs/1.8/index.html?org/bukkit/potion/PotionType.html",children:"Potion Types"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"SPEED"}),", ",(0,t.jsx)(n.code,{children:"SLOWNESS"})]})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"player-conditions",children:"Player Conditions"}),"\n",(0,t.jsxs)(n.p,{children:["For player conditions, we usually have different parameters for each condition type. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Experience"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's experience level and points.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"check-level"})," is true, the player's level must be within the specified range.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"check-exp"})," is true, the player's experience points must be within the specified range.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_experience\nmin-level: 10\nmax-level: 20\ncheck-level: true\n\nmin-exp: 1000\nmax-exp: 5000\ncheck-exp: true\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Flight"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's ability to fly or flying state.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"is-flying"})," is true, the player must be flying.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"check-allow-flight"})," is true, the player must be allowed to fly.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_flight\nis-flying: true\ncheck-allow-flight: true\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Food"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's food level.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"min-food"})," and ",(0,t.jsx)(n.code,{children:"max-food"})," define the accepted food level range.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_food\nmin-food: 10\nmax-food: 20\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Game Mode"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's game mode.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"gamemodes"})," is a list of accepted game modes: ",(0,t.jsx)(n.code,{children:"SURVIVAL"}),", ",(0,t.jsx)(n.code,{children:"CREATIVE"}),", ",(0,t.jsx)(n.code,{children:"ADVENTURE"}),", ",(0,t.jsx)(n.code,{children:"SPECTATOR"}),".",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_gamemode\ngamemodes:\n- SURVIVAL\n- CREATIVE\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Health"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's health.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"min-health"})," and ",(0,t.jsx)(n.code,{children:"max-health"})," define the accepted health range.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_health\nmin-health: 10\nmax-health: 20\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Location"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's location.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"worlds"})," is a list of accepted worlds.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"check-coordinates"})," is true, the player's coordinates must be within the specified min and max for x, y, z.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_location\nworlds:\n- world1\n- world2\n\ncheck-coordinates: true\nmin-x: 100\nmax-x: 200\nmin-y: 50\nmax-y: 100\nmin-z: 100\nmax-z: 200\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Permission"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's permissions.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"permissions"})," is a list of required permissions.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"require-all"})," is true, the player must have all listed permissions.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_permission\npermissions:\n- guilds.tasks.test\n- guilds.tasks.another-test\nrequire-all: true\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Potion Effect"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's active potion effects.",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.code,{children:"potion-effects"})," is a list of required effects.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"require-all"})," is true, the player must have all listed effects.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_potion\npotion-effects:\n- SPEED\n- SLOWNESS\nrequire-all: true\n"})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Player Sneak"}),(0,t.jsxs)(n.p,{children:["Condition based on the player's sneak state.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"is-sneaking"})," is true, the player must be sneaking.",(0,t.jsx)("br",{}),"\nIf ",(0,t.jsx)(n.code,{children:"check-sneak"})," is true, the sneak state will be checked.",(0,t.jsx)("br",{})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: player_sneak\nis-sneaking: true\ncheck-sneak: true\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);